<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
		http://www.springframework.org/schema/context  
		http://www.springframework.org/schema/context/spring-context-4.3.xsd  
		http://www.springframework.org/schema/tx  
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/cache  
		http://www.springframework.org/schema/cache/spring-cache.xsd  
		http://www.springframework.org/schema/aop   
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 注解配置 -->
	<context:annotation-config />

	<!-- 扫描net下所有注解 -->
	<context:component-scan base-package="net.*" />

	<!-- 加载配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:config/properties/jdbc.properties</value>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!-- druid数据源配置 -->
	<bean id="mainDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="name" value="${jdbc.name}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="poolPreparedStatements" value="${druid.poolPrpdStmts}" />
		<property name="maxOpenPreparedStatements" value="${druid.maxOpPrpdStmts}" />
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBtwnEvctRsMls}" />
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvctbIdTmMls}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
	</bean>

	<!-- spring数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource" ref="mainDataSource" />
	</bean>

	<!-- 加载mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:config/mybatis/sqlMapConfig.xml</value>
		</property>
	</bean>

	<!-- 动态代理实现mybatis 不用写dao的实现 -->
	<bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="net.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 使用注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 开启这个配置 spring才能识别@Scheduled注解 -->
	<task:annotation-driven scheduler="qbScheduler" />
	<task:scheduler id="qbScheduler" pool-size="20" />
	<!-- 配置系统线程 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="100" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>


	<!-- redis做缓存 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- 配置缓存 -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />    
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->    
        <property name="keySerializer" >    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />    
        </property>    
        <property name="valueSerializer" >    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />    
        </property>    
        <property name="hashKeySerializer">    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
        </property>    
        <property name="hashValueSerializer">    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>    
        </property>    
        <!--开启事务  -->  
        <property name="enableTransactionSupport" value="true"></property> 
	</bean>
	
	<!-- jedis 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- redis服务器中心 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="poolConfig" />
		<property name="port" value="${redis.port}" />
		<property name="hostName" value="${redis.host}" />
		<property name="password" value="${redis.pass}" />
        <property name="database" value="${redis.dbIndex}" />
		<property name="timeout" value="${redis.timeout}"></property>
	</bean>
	
	
    <!-- 配置RedisCacheConfig -->
    <bean id="redisCacheConfig" class="net.kingtrans.utils.RedisCacheConfig">
        <constructor-arg ref="connectionFactory" />
        <constructor-arg ref="redisTemplate" />
        <constructor-arg ref="cacheManager" />
    </bean>
	

	<!-- 视图渲染器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 如果当前请求为"/"时，则转发到"main" -->
	<mvc:view-controller path="/" view-name="forward:main" />

	<!-- 配置打开注解扫描 -->
	<mvc:annotation-driven />

	<!-- 对静态资源文件的访问 -->
	<mvc:resources mapping="/resource/**" location="/resource/" />
	<mvc:resources mapping="/favicon.ico" location="/favicon.ico" />

	<!-- 支持上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!-- 拦截器 多个拦截器，顺序执行 
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/api/**" />
			<mvc:exclude-mapping path="/resource/**" />
			<mvc:exclude-mapping path="/upload/**" />
			<mvc:exclude-mapping path="/favicon.ico" />
			<bean class="net.kingtrans.admin.interceptor.LogonInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	-->

	<!-- spring 异常处理器 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="/error/error" />
		<property name="exceptionAttribute" value="ex" />
	</bean>

</beans>
